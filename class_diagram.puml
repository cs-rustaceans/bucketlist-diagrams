@startuml
skinparam backgroundColor #AAAAAA

rectangle "dependencies" {
  interface "Eq"
  interface "PartialEq"

  rectangle "jsonwebtoken" {
  }

  rectangle "serde" {
    interface "Serialize"
    interface "Deserialize"
  }

  rectangle "actix_web" {
    interface "FromRequest"
    rectangle "error" {
      struct BlockingError
      interface "ResponseError"
    }
  }

  rectangle "diesel" {
    rectangle "result" {
      struct "Error"
    }
    interface "Selectable"
    interface "Identifiable"
    interface "Queryable"
    interface "Insertable"
    interface "AsChangeset"
  }

  rectangle "chrono" {
    struct "NaiveDateTime"
    struct "DateTime<Utc>"
  }
  
  rectangle "bcrypt" {

  }

}

rectangle "applib" {
  interface "From<BlockingError>"
  interface "From<Error>"
  
  struct "Config" {
    database_url: Sring
    port: u16
    jwt_secret: String
    new() -> Self
    database_url(&self: Self): String
    port(&self: Self): u16
    jwt_secret(&self: Self): String
  }

  struct "AppError" {
    status: actix_web::http::StatusCode
    code: String
    message: String
    internal_server_error(): Self
    not_found(): Self
    bad_request(): Self
    use_delete_endpoint_instead(): Self
    invalid_email_password(): Self
    unauthorized(): Self
    user_inactive_or_deleted(): Self
    destination_is_not_reviewed(): Self
  }
  Serialize <|-- AppError
  Debug <|-- AppError
  Display <|-- AppError
  "From<BlockingError>" <|-- AppError
  "ResponseError" <|-- AppError
  "From<Error>" <|-- AppError
}

rectangle "db" {
  rectangle "model" {
    note "All structs implement serde Serilaize and Deserialize" as N1
    note "All structs starting with 'New' implement diesel Insertable" as N2
    note "All structs starting with 'Update' implement diesel AsChangeset" as N3
    note "All other structs implement diesel Identifiable, Queryable, Selectable" as N4
    note "All enums implement Eq, PartialEq, TryFrom<& str>, Into<& str>" as N5

    rectangle "bucketlist-item"{
      struct BucketlistItem {
        id: u64
        destination_id: u64
        owner_id: u64
        start_date: NaiveDateTime
        end_date: NaiveDateTime
        is_favorite: bool
      }
      struct NewBucketlistItem {
        destination_id: u64
        owner_id: u64
        start_date: NaiveDateTime
        end_date: NaiveDateTime
      }
      struct UpdateBucketlistItem {
        start_date: NaiveDateTime
        end_date: NaiveDateTime
      }

      "NaiveDateTime" ---[#red]- "BucketlistItem"
      "NaiveDateTime" ---[#red]- "NewBucketlistItem"
      "NaiveDateTime" ---[#red]- "UpdateBucketlistItem"
    }
    rectangle "destination" {
      struct Destination {
        id: u64
        owner_id: u64
        visiblity: u64
        is_reviewed: bool
        name: String
        latitude: f64
        longitude: f64
      }

      struct NewDestination {
        id: u64
        owner_id: u64
        visiblity: u64
        is_reviewed: bool
        name: String
        latitude: f64
        longitude: f64
      }
      struct UpdateDestination {
        owner_id: Option<u64>
        visiblity: Option<u64>
        is_reviewed: Option<bool>
        name: Option<String>
        latitude: Option<f64>
        longitude: Option<f64>
      }
      enum VisibilityEnum {
        Public
        Private
      }
    }
    
    rectangle "session" {
      struct Session {
        id: u64,
        user_id: u64,
        start_date: NaiveDateTime,
        end_date: NaiveDateTime
      }
      
      struct NewSession {
        user_id: u64,
        start_date: NaiveDateTime,
        end_date: NaiveDateTime
      }
      
      "NaiveDateTime" ---[#blue]- "Session"
      "NaiveDateTime" ---[#blue]- "NewSession"
    }

    rectangle "user" {
      struct User {
        id: u64
        role: String
        email: String
        password: String
        status: String
      }
      
      struct NewUser {
        role: String
        email: String
        password: String
      }
      
      struct UpdateUser {
        role: Option<String>
        email: Option<String>
        password: Option<String>
        status: Option<String> 
      }

      enum StatusEnum {
        Active
        Inactive
        Deleted
      }
      
      enum RoleEnum {
        Admin
        Employee
      }
    }
    "FromRequest" <|-[#green]- User
  }
  rectangle "predicates" {
    metaclass "destination" as predicates_destinations {
      available_for_user(user_id: u64): Box<dyn BoxableExpression<destinations::table, Db, SqlType = Bool>> 
    }
  }
  
  rectangle "type Db = Mysql" {
  
  }
  
  rectangle "type DbPool = r2d2::Pool<diesel::r2d2::ConnectionManager<MySqlConnection>>" {
  
  }
  
  rectangle "sql_function! last_inserted_id() -> sql_types::BigInt" {
  }

  rectangle "schema" {
    note "Autogenerated by Diesel" as N6
    struct "users" as schema_users
    struct "sessions" as schema_sessions
    struct "bucketlist_items" as schema_bucketlist_items
    struct "destinations" as schema_destinations
  }
}

rectangle "dto" {
  note "All structs implement serde Serialize and Deserialize" as N7
  
  struct BucketlistItemWithDestinationDTO {
    bucketlist_item: BucketlistItem
    destination: Destination
  }

  "BucketlistItem" ---d- "BucketlistItemWithDestinationDTO"
  "Destination" ---d- "BucketlistItemWithDestinationDTO"
  
  struct BucketlistItemWithPrivateListDTO {
    name: String
    latitude: f64
    longitude: f64
    start_date: NaiveDateTime
    end_date: NaiveDateTime
  }

  "NaiveDateTime" ----- "BucketlistItemWithPrivateListDTO"

  struct GetUserDTO {
    id: u64,
    role: String
    status: String
    email: String
  }

  interface "From<User>"

  "From<User>" <|-- "GetUserDTO"

  struct LoginForm {
    email: String
    password: String
  }

  struct LoginTokenClaims {
    user_id: u64
    session_id: u64
    role: String
    iat: DateTime<Utc>
    exp: DateTime<Utc>
  }

  "DateTime<Utc>" ----- "LoginTokenClaims"

  struct UserChangePasswordDTO {
    old_password: String
    new_password: String
  }
}

rectangle guard {
  metaclass "admin" as admin_guard {
    admin_guard(ctx: &actix_web::guard::GuardContext): bool
  }
  metaclass "employee" as employee_guard {
    employee_guard(ctx: &actix_web::guard::GuardContext): bool
  }

  "User" -[#yellow]d-- "admin"
  "RoleEnum" --[#yellow]d- "admin"
  "User" --[#yellow]d- "employee"
  "RoleEnum" --[#yellow]d- "employee"
}

rectangle middleware {
  metaclass "auth_middleware" {
    auth_middleware(req: actix_web::dev::ServiceRequest, credentials: actix_web_httpauth::extractors::bearer::BearerAuth): Result<ServieRequest, (actix_web::error::Error, ServiceRequest)>
  }

  "Session" --[#purple]- "auth_middleware"
  "User" --[#purple]- "auth_middleware"
  "schema_users" --[#purple]- "auth_middleware"
  "schema_sessions" --[#purple]- "auth_middleware"
  "LoginClaims" --[#purple]- "auth_middleware"
}

rectangle "service" {
  note "All services use the type DbPool defined in db module" as N7
  rectangle "admin" {
    metaclass "bucketlist_service" as admin_bucketlist_service {
      admin_get_favorite_bucketlist_items(db_pool: actix_web::Data<DbPool>): Result<Vec<BucketlistItemWithDestinationDTO>, AppError>
    }

    "admin_bucketlist_service" ---[#red]u- schema_users
    "admin_bucketlist_service" ---[#red]u- schema_bucketlist_items
    "admin_bucketlist_service" ---[#red]u- schema_destinations
    "admin_bucketlist_service" ---[#red]u- BucketlistItemWithDestinationDTO
    "admin_bucketlist_service" ---[#red]u- AppError
    
    metaclass "destination_service" as admin_destination_service {
      admin_get_all_destinations(db_pool: actix_web::Data<DbPool>): Result<Vec<Destination>, AppError>
      admin_get_all_unreviewed_destinations(db_pool: actix_web::Data<DbPool>): Result<Vec<Destination>, AppError>
      admin_get_destination_by_id(db_pool: actix_web::Data<DbPool>, id: u64): Result<Destination, AppError>
      admin_create_destination(db_pool: actix_web::Data<DbPool>, destination: actix_web::Json<NewDestination>): Result<(), AppError>
      admin_update_destination(db_pool: actix_web::Data<DbPool>, destination: actix_web::Json<UpdateDestination>): Result<(), AppError>
      admin_delete_destination_by_id(db_pool: actix_web::Data<DbPool>, id: u64): Result<(), AppError>
    }
    
    "admin_destination_service" ---[#blue]u- schema_users
    "admin_destination_service" ---[#blue]u- schema_destinations
    "admin_destination_service" ---[#blue]u- AppError
    "admin_destination_service" ---[#blue]u- Destination
    "admin_destination_service" ---[#blue]u- NewDestination
    "admin_destination_service" ---[#blue]u- UpdateDestination
    
    metaclass "user_service" as admin_user_service {
      admin_get_all_users(db_pool: actix_web::Data<DbPool>): Result<Vec<GetUserDTO>, AppError>
      admin_get_user_by_id(db_pool: actix_web::Data<DbPool>, id: u64): Result<GetUserDTO, AppError>
      admin_create_user(db_pool: actix_web::Data<DbPool>, user: actix_web::Json<NewUser>): Result<(), AppError>
      admin_update_user(db_pool: actix_web::Data<DbPool>, user: actix_web::Json<UpdateUser>): Result<(), AppError>
      admin_delete_user_by_id(db_pool: actix_web::Data<DbPool>, id: u64): Result<(), AppError>
    }
    
    "admin_user_service" ---[#green]u- schema_users
    "admin_user_service" ---[#green]u- AppError
    "admin_user_service" ---[#green]u- User
    "admin_user_service" ---[#green]u- NewUser
    "admin_user_service" ---[#green]u- UpdateUser
    "admin_user_service" ---[#green]u- GetUserDTO

  }
  
  rectangle "employee" {
    note "The user is provided through the authentification middleware " as N8
    
    metaclass "bucketlist_service" as employee_bucketlist_service {
      employee_get_own_bucketlist(db_pool: actix_web::Data<DbPool>, user: User): Result<Vec<BucketlistItemWithDestinationDTO>, AppError>
      employee_get_bucketlist_item_by_id(db_pool: actix_web::Data<DbPool>, user: User, id: u64): Result<BucketlistItemWithDestinationDTO, AppError>
      employee_add_bucketlist_item_from_available_destinations(db_pool: actix_web::Data<DbPool>, user: User, new_bucketlist_item_json: actix_web::Json<NewBucketlistItem>): Result<(), AppError>
      employee_add_bucketlist_item_wtih_private_list(db_pool: actix_web::Data<DbPool>, user: User, bucketlist_item_with_private_list_json: actix_web::Json<BucketlistItemWithPrivateListDTO>): Result<(), AppError>
      employe_update_bucketlist_item(db_pool: actix_web::Data<DbPool>, user: User, id: u64, update_bucketlist_item_json: actix_web::Json<UpdateBucketlistItem>): Result<(), AppError>
      employe_delete_bucketlist_item(db_pool: actix_web::Data<DbPool>, user: User, id: u64): Result<(), AppError>
      employe_make_bucketlist_item_public(db_pool: actix_web::Data<DbPool>, user: User, id: u64): Result<(), AppError>
      employe_make_bucketlist_item_private(db_pool: actix_web::Data<DbPool>, user: User, id: u64): Result<(), AppError>
    }

    "employee_bucketlist_service" ----[#red]u- schema_destinations
    "employee_bucketlist_service" ----[#red]u- schema_bucketlist_items
    "employee_bucketlist_service" ----[#red]u- AppError
    "employee_bucketlist_service" ----[#red]u- NewBucketlistItem
    "employee_bucketlist_service" ----[#red]u- UpdateBucketlistItem
    "employee_bucketlist_service" ----[#red]u- BucketlistItemWithPrivateListDTO
    "employee_bucketlist_service" ----[#red]u- predicates_destinations

    metaclass "destination_service" as employee_destination_service {
      employee_get_available_destinations(db_pool: actix_web::Data<DbPool>, user: User): Result<Vec<Destination>, AppError>
    }

    "employee_destination_service" ----[#blue]u- schema_users
    "employee_destination_service" ----[#blue]u- schema_destinations
    "employee_destination_service" ----[#blue]u- AppError
    "employee_destination_service" ----[#blue]u- predicates_destinations

    metaclass "user_service" as employee_user_service {
      employe_change_password(db_pool: actix_web::Data<DbPool>, user: User, user_change_password_dto: actix_web::Json<UserChangePasswordDTO>): Result<(), AppError>
      employe_make_account_inactive(db_pool: actix_web::Data<DbPool>, user: User): Result<(), AppError>
    }
    
    "employee_user_service" ----[#green]u- schema_users
    "employee_user_service" ----[#green]u- AppError
    "employee_user_service" ----[#green]u- User
    "employee_user_service" ----[#green]u- UserChangePasswordDTO
  }

  metaclass "login_service" {
    login(db_pool: actix_web::Data<DbPool>, login: LoginForm): Result<Session, AppError>
  }
  "login_service" ----[#pink]u- User
  "login_service" ----[#pink]u- Session
  "login_service" ----[#pink]u- schema_users
  "login_service" ----[#pink]u- schema_sessions
}

rectangle "routes" {
  note "All routes have a corresponding method in services. They all return Result<actix_web::HttpResponse, AppError>" as N9
}

"routes" -----u[#pink]- admin_guard
"routes" -----u[#pink]- employee_guard
"routes" -----u[#pink]- auth_middleware

@enduml
